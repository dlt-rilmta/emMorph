################################################## START OF LICENSE ##################################################
#
#  This file is part of the emMorph / Humor morphological analyzer description for Hungarian.
#  Copyright (C) 2001-2016 Attila Novák
#  
#  The author of the database and the database compilation environment is Attila Novák (novakat@gmail.com).
#  The resource is available from: https://github.com/dlt-rilmta/emMorph
#  
#  The database files are licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0
#  (CC BY-NC-SA) license, the compilation scripts under the GNU General Public License (GPL v3)
#  with the following amendments:
#  
#  By downloading/cloning this database and tools you accept the following terms:
#  1. Please inform the author at novakat@gmail.com about your use of the database/tools clearly indicating what you use them for
#  as soon as you start working on your application/experiment/resource involving this database or tool.
#  2. Even in the case of non-academic use, you promise to publish a scientific paper about 
#  each application, experimental system or linguistic resource you create or experiment you perform using this resource quoting
#  the articles below, and inform the author at novakat@gmail.com about each article you publish.
#  If you definitely cannot publish an article, please contact the author.
#  
#  Articles to quote are listed at https://github.com/dlt-rilmta/emMorph, the list is currently the following:
#  (See the BibTeX file quotethis.bib in the root directory):
#  
#  Attila Novák (2014): A New Form of Humor – Mapping Constraint-Based Computational Morphologies to a Finite-State Representation.
#  In: Proceedings of the 9th International Conference on Language Resources and Evaluation (LREC-2014). Reykjavík, pp. 1068–1073 (ISBN 978-2-9517408-8-4)
#  
#  Attila Novák; Borbála Siklósi; Csaba Oravecz (2016): A New Integrated Open-source Morphological Analyzer for Hungarian
#  In: Proceedings of the Tenth International Conference on Language Resources and Evaluation (LREC 2016). Portorož, pp. 1315–1322.
#  
#  Novák Attila (2003): Milyen a jó Humor? [What is good Humor like?] In: Magyar Számítógépes Nyelvészeti Konferencia (MSZNY 2003). Szegedi Tudományegyetem, pp. 138–145
#  
#  3. Please do share your adaptations of the morphology (vocabulary extensions etc.) using the same licenses.
#  4. If you are interested in using or adapting the resource for commercial purposes, please contact the author.
#  ***
#  
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#  
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  
#
################################################## END OF LICENSE ##################################################

use utf8;
$bitlength=32;

#(right) properties and requirements valid at the left edge of word
$startcond=['match_any','!sufx','n'];

#the right properties used for matrix selection
#only bit-encoded right properties may be used (req's not)
#the expressions may not contain disjunction but they must be disjunct

$matrixsel={
'inflable&cat_vrb'=>'v', # verbs
#'inflable&!cat_vrb&!stmalt'=>'n',# inflectable non-verbs
'inflable&!cat_vrb'=>'n',# inflectable non-verbs
#'inflable&!cat_vrb&stmalt'=>'n_alt',# inflectable closed class alternating non-verbs
'!inflable'=>'n',     # the rest also goes to the n mtx
};

# this is used for generating metacteg.txt
# it contains definition of the category labels used in the 'meta-dictionary'
# field1 is lexicon lookup direction ('l' for stems, 'r' for inflections)
# field2 is a conjunctive formula of bit encoded right properties only

$metacteg={
#prefixes
'pfx_N' =>	['l','!sfx&!inflable&pfx&pfx_N'], #  nominal prefix (bel, gyógy)
'pfx_Adj' =>	['l','!sfx&!inflable&pfx&pfx_Adj'], #  nominal prefix of adjectives (fél)
'pfx_V' =>	['l','!sfx&!inflable&pfx&pfx_V'], # verbal prefix
'pfx_sup' =>	['l','!sfx&!inflable&pfx&pfx_sup'], # the superlative prefix
'pfx_VNom' =>	['l','!sfx&!inflable&pfx&pfx_VNom'], #  nominal prefix of nominalized verbs (ön)
#inflectable stems
'npron'  =>	['l','!sfx&inflable&!cat_vrb&!cat_noun&cat_pron&!deix'], # a noun pronoun (cannot be a compound member)
'npron_deix' =>	['l','!sfx&inflable&!cat_vrb&!cat_noun&cat_pron&deix'], # a deictic pronoun (ez/az)
#'nstem' =>	['l','!sfx&inflable&!cat_vrb'], # nominal stem
#'qstem'  =>	['l','!sfx&inflable&!cat_vrb&!cat_noun&!cat_pron&cat_num&not_num'], # numeral stem (cannot be a compound member)
#'qstem_sup'=>	['l','!sfx&inflable&!cat_vrb&!cat_noun&!cat_pron&cat_num&not_num&sup'], # numeral stem (cannot be a compound member)
#'qstem_!sup'=>	['l','!sfx&inflable&!cat_vrb&!cat_noun&!cat_pron&cat_num&not_num&!sup'], # numeral stem (cannot be a compound member)
#'astem'  =>	['l','!sfx&inflable&!cat_vrb&!cat_noun&!cat_pron&!cat_num'], # adjective stem (cannot be a compound member)
#'astem_sup'=>	['l','!sfx&inflable&!cat_vrb&!cat_noun&!cat_pron&!cat_num&sup'], # comparative adjective stem
#'astem_!sup'=>	['l','!sfx&inflable&!cat_vrb&!cat_noun&!cat_pron&!cat_num&!sup'], # adjective stem which does not license superlative
#'nstem' =>	['l','!sfx&inflable&!cat_vrb&cat_noun&not_cmp1&!cmp2'], # noun stem that cannot be compounded
#'nstem2' =>	['l','!sfx&inflable&!cat_vrb&cat_noun&cmp2'], # noun stem that can be a second compound member
#'nstem2only' =>	['l','!sfx&inflable&!cat_vrb&cat_noun&cmp2&not_cmp1'], # noun stem that can only be a second compound member
#'nstem1' =>	['l','!sfx&inflable&!cat_vrb&cat_noun&!not_cmp1'], # noun stem that can be a first compound member
#'vstem' =>	['l','!sfx&inflable&cat_vrb'], # verbal stem
#numerals
#'num_1'   =>    ['l','!sfx&inflable&!cat_vrb&!cat_noun&!cat_pron&cat_num&num_1'],   #the numerals 1, 2
#'num_10'   =>   ['l','!sfx&inflable&!cat_vrb&!cat_noun&!cat_pron&cat_num&num_10'],  #the numerals 3-99
#'num_100'  =>   ['l','!sfx&inflable&!cat_vrb&!cat_noun&!cat_pron&cat_num&num_100'], #the numerals 100,200,...,900
#'num_1000' =>   ['l','!sfx&inflable&!cat_vrb&!cat_noun&!cat_pron&cat_num&num_1000'],#the numeral 1000 (if no hundreds or tens or ones)
#'num_1eX'  =>   ['l','!sfx&inflable&!cat_vrb&!cat_noun&!cat_pron&cat_num&num_1eX'], #the numerals 1e6,9,12
'num_1dig' =>   ['l','!sfx&inflable&!cat_vrb&!cat_noun&!cat_pron&cat_num&num_1dig'],#a single digit 1-9
'num_fdig' =>   ['l','!sfx&inflable&!cat_vrb&!cat_noun&!cat_pron&cat_num&num_fdig'],#a digit which may not be first but must be final
'num_1dig+dot'=>['l','!sfx&!inflable&!pfx&!cat_vrb&cat_num&num_1dig&dot_fin'],#a single digit 1-9 which requires a .
'num_fdig+dot'=>['l','!sfx&!inflable&!pfx&!cat_vrb&cat_num&num_fdig&dot_fin'],#a digit which may not be first but must be final and requires a .
#'num_2000' =>   ['l','!sfx&!inflable&!pfx&!cat_vrb&cat_num&num_2000'], #the numeral 1000 (numerals above 2000 must contain a hyphen if there are hundreds or tens or ones)
'num_0dig' =>   ['l','!sfx&!inflable&!pfx&!cat_vrb&cat_num&num_0dig&!cat_noun&!dot_fin'], #a single 0 digit
#'num_0dig+dot'=>['l','!sfx&!inflable&!pfx&!cat_vrb&cat_num&num_0dig&!cat_noun&dot_fin'], #a single 0 digit which requires .
'dotcom'   =>   ['l','!sfx&!inflable&!pfx&!cat_vrb&cat_num&num_dotcom'], #dot or comma in numbers
#'num+dot'  =>   ['l','!sfx&!inflable&!pfx&!cat_vrb&cat_num&not_num&dot_fin'], #a number which requires a .

'roman_1'   =>    ['l','!sfx&inflable&!cat_vrb&!cat_noun&!cat_pron&cat_num&roman_1'],   #roman numerals 1,..,9
'roman_10'   =>   ['l','!sfx&inflable&!cat_vrb&!cat_noun&!cat_pron&cat_num&roman_10'],  #roman numerals 10,..,90
'roman_100'  =>   ['l','!sfx&inflable&!cat_vrb&!cat_noun&!cat_pron&cat_num&roman_100'], #roman numerals 100,200,...,900
'roman_1000' =>   ['l','!sfx&inflable&!cat_vrb&!cat_noun&!cat_pron&cat_num&roman_1000'],#roman numerals 1000,2000
#'roman+dot'  =>   ['l','!sfx&!inflable&!pfx&!cat_vrb&cat_num&dot_fin&romanX'],#roman numeral 1,..,9 which requires a .
'roman_1+dot'=>   ['l','!sfx&!inflable&!pfx&!cat_vrb&cat_num&dot_fin&roman_1'],#roman numeral 1,..,9 which requires a .
'roman_10+dot'=>  ['l','!sfx&!inflable&!pfx&!cat_vrb&cat_num&dot_fin&roman_10'],#roman numeral ...
'roman_100+dot'=> ['l','!sfx&!inflable&!pfx&!cat_vrb&cat_num&dot_fin&roman_100'],#roman numeral ...
'roman_1000+dot'=>['l','!sfx&!inflable&!pfx&!cat_vrb&cat_num&dot_fin&roman_1000'],#roman numeral ...

#'num_1fdig'=>   ['l','!sfx&inflable&!cat_vrb&!cat_noun&!cat_pron&cat_num&num_1fdig'],#a digit which may not be followed by another

#'n3'    =>	['l','!sfx&inflable&!cat_vrb&!cat_noun&!cat_pron&numX&n3'],#1-9
#'n1d'   =>	['l','!sfx&inflable&!cat_vrb&!cat_noun&!cat_pron&numX&n1d'],#kett(ed),egy(ed)
#'n10n'  =>	['l','!sfx&inflable&!cat_vrb&!cat_noun&!cat_pron&numX&n10n'],#tizen, huszon
#'n30'   =>	['l','!sfx&inflable&!cat_vrb&!cat_noun&!cat_pron&numX&n30'],#30-90
#'n10'   =>	['l','!sfx&inflable&!cat_vrb&!cat_noun&!cat_pron&numX&n10'],#10,20
#'n100'  =>	['l','!sfx&inflable&!cat_vrb&!cat_noun&!cat_pron&numX&n100'],#100
#'n1000' =>	['l','!sfx&inflable&!cat_vrb&!cat_noun&!cat_pron&numX&n1000'],#1000
#'n1eX'  =>	['l','!sfx&inflable&!cat_vrb&!cat_noun&!cat_pron&numX&n1eX'],#1e6,9,12

#uninflectable stems
'uninfl_nosug' =>	['l','!sfx&!inflable&!pfx&!cat_vrb&!cat_Adv&!cmp2&!cat_num&!dot_fin&nosug'],
'uninfl'=>	['l','!sfx&!inflable&!pfx&!cat_vrb&!cat_Adv&!cmp2&!cat_num&!dot_fin&!nosug'], # uninflectable non-verbal stem
'uninfl+dot'=>	['l','!sfx&!inflable&!pfx&!cat_vrb&!cat_noun&!cmp2&!cat_num&dot_fin'], # uninflectable non-verbal stem
'nstem_uninfl+dot'=>	['l','!sfx&!inflable&!pfx&!cat_vrb&cat_noun&!cmp2&!cat_num&dot_fin'], # uninflectable non-verbal stem
'nstem_uninfl_cmp2+dot'=>	['l','!sfx&!inflable&!pfx&!cat_vrb&cat_noun&cmp2&!cat_num&dot_fin'], # uninflectable non-verbal stem
'Adv'=>	['l','!sfx&!inflable&!pfx&!cat_vrb&cat_Adv&!cmp2&!cat_num&!dot_fin'], # adverbial stem
'Adv_!sup'=>['l','!sfx&!inflable&!pfx&!cat_vrb&cat_Adv&!cmp2&!cat_num&!dot_fin&!sup'], # adverbial stem that does not license the superlative prefix
'Adv_sup'=>['l','!sfx&!inflable&!pfx&!cat_vrb&cat_Adv&!cmp2&!cat_num&!dot_fin&sup'], # adverbial stem that licenses the superlative prefix
#'nstem2+inf'=>	['l','!sfx&!inflable&!pfx&!cat_vrb&cat_noun&cmp2&!dot_fin'], # nominal compoundable stem with inflectional suffix
#'vstem+inf'=>	['l','!sfx&!inflable&!pfx&cat_vrb'], # verbal stem with inflectional suffix
#derivational suffixes
'nder' =>	['l','sfx&inflable&!cat_vrb&!cmp2&!sup'], # nominal case-lowering derivational suffix
'ndercmp' =>	['l','sfx&inflable&!cat_vrb&!cmp2&sup'], # the comparative sfx (nominal case-lowering derivational suffix)
'nder2' =>	['l','sfx&inflable&!cat_vrb&cmp2&cat_noun'], # nominal non-case-lowering derivational suffix
'nder2_adj' =>	['l','sfx&inflable&!cat_vrb&cmp2&!cat_noun&!O'], # nominal non-case-lowering derivational adjectival suffix (-szerű, fajta etc.)
'-beli-sfx' =>	['l','sfx&inflable&!cat_vrb&cmp2&!cat_noun&O'], # -beli suffix attached to inflected stems
'O-sfx' =>	['l','sfx&inflable&!cat_vrb&!cmp2&!sup&O&!AS&!119sfx'], # the O suffix
'AS-sfx' =>	['l','sfx&inflable&!cat_vrb&!cmp2&!sup&!O&AS&!119sfx'], # the AS suffix
'119sfx' =>	['l','sfx&inflable&!cat_vrb&!cmp2&!sup&!O&!AS&119sfx'], # the suffixes -i -Ú -Vs -nyi -nként: e.g. két+láb+ú
'NKENT_sfx' =>	['r','sfx&!inflable&!punct&!qtag&!sup&119sfx'], # the suffix -nként: e.g. két+órá+nként
'FRACT_sfx' =>	['l','sfx&inflable&!cat_vrb&!cmp2&!sup&!O&!AS&!119sfx&sfx_FRACT'], # the fractional suffix -Vd: e.g. három+negy+ed
'nder-FRACT' =>	['l','sfx&inflable&!cat_vrb&!cmp2&!sup&!sfx_FRACT'], # nominal case-lowering derivational suffix except -Vd
'nder-O' =>	['l','sfx&inflable&!cat_vrb&!cmp2&!O&!AS'], # the non-O/AS nominal suffixes
'nder-119' =>	['l','sfx&inflable&!cat_vrb&!cmp2&!sup&!119sfx'], # the non-119 (-i -Ú -Vs -nyi) nominal suffixes
'vder' =>	['l','sfx&inflable&cat_vrb&!HAT'], # verbal derivational suffix
'HAT-sfx' =>	['l','sfx&inflable&cat_vrb&HAT'], # the permissive modal suffix
'Advdercmp' =>	['r','sfx&!inflable&!punct&!qtag&sup'], # non-inflectable suffix sequence containing the comparative suffix (bb+an/bb+ul)
#inflections
'inf' =>	['r','sfx&!inflable&!punct&!qtag&!sup&!119sfx'], # inflectional suffix
#question tag '-e'
'qtag' =>	['r','sfx&!inflable&!punct&qtag'], # inflectional suffix
#punctuation
'hyphen' =>     ['l','sfx&!inflable&punct&!lpunct&!rpunct&!space'], #hyphen
'nospace' =>     ['l','sfx&!inflable&punct&!lpunct&!rpunct&space'], #hyphen
#'stop' =>       ['r','sfx&!inflable&punct&final&stop'], #full stop
#'punct' =>      ['r','sfx&!inflable&punct&final&!stop'], #other punctuation
'lpunct' =>      ['l','sfx&!inflable&punct&lpunct'], #other punctuation
'rpunct' =>      ['r','sfx&!inflable&punct&rpunct&!dotpunct'], #other punctuation
'dotpunct' =>    ['r','sfx&!inflable&punct&rpunct&dotpunct'], #other punctuation

#category variants used for compound checking
#'nstem1_cmpd' =>	['l','!sfx&inflable&!cat_vrb&cat_noun&!not_cmp1&!cmp2&cmpd'],
#'nstem1_!cmpd' =>	['l','!sfx&inflable&!cat_vrb&cat_noun&!not_cmp1&!cmp2&!cmpd'],
'nstem1_sup_cmpd' =>	['l','!sfx&inflable&!cat_vrb&cat_noun&!not_cmp1&!cmp2&cmpd&sup&!acron'],
'nstem1_!sup_cmpd' =>	['l','!sfx&inflable&!cat_vrb&cat_noun&!not_cmp1&!cmp2&cmpd&!sup&!acron'],
'nstem1_sup_!cmpd' =>	['l','!sfx&inflable&!cat_vrb&cat_noun&!not_cmp1&!cmp2&!cmpd&sup&!acron'],
'nstem1_!sup_!cmpd' =>	['l','!sfx&inflable&!cat_vrb&cat_noun&!not_cmp1&!cmp2&!cmpd&!sup&!acron'],
'nstem12_sup_cmpd' =>	['l','!sfx&inflable&!cat_vrb&cat_noun&!not_cmp1&cmp2&cmpd&sup&!acron'],
'nstem12_!sup_cmpd' =>	['l','!sfx&inflable&!cat_vrb&cat_noun&!not_cmp1&cmp2&cmpd&!sup&!acron'],
'nstem12_sup_!cmpd' =>	['l','!sfx&inflable&!cat_vrb&cat_noun&!not_cmp1&cmp2&!cmpd&sup&!acron'],
'nstem12_!sup_!cmpd' =>	['l','!sfx&inflable&!cat_vrb&cat_noun&!not_cmp1&cmp2&!cmpd&!sup&!acron'],
'nstem2_sup_cmpd' =>	['l','!sfx&inflable&!cat_vrb&cat_noun&not_cmp1&cmp2&cmpd&sup&!acron'],
'nstem2_!sup_cmpd' =>	['l','!sfx&inflable&!cat_vrb&cat_noun&not_cmp1&cmp2&cmpd&!sup&!acron'],
'nstem2_sup_!cmpd' =>	['l','!sfx&inflable&!cat_vrb&cat_noun&not_cmp1&cmp2&!cmpd&sup&!acron'],
'nstem2_!sup_!cmpd' =>	['l','!sfx&inflable&!cat_vrb&cat_noun&not_cmp1&cmp2&!cmpd&!sup&!acron'],

'nstem_cmpd_nosug' =>	['l','!sfx&inflable&!cat_vrb&cat_noun&not_cmp1&!cmp2&cmpd&!acron&nosug'],
'nstem_!cmpd_nosug' =>	['l','!sfx&inflable&!cat_vrb&cat_noun&not_cmp1&!cmp2&!cmpd&!acron&nosug'],
'nstem_cmpd' =>	['l','!sfx&inflable&!cat_vrb&cat_noun&not_cmp1&!cmp2&cmpd&!acron&!nosug'],
'nstem_!cmpd' =>	['l','!sfx&inflable&!cat_vrb&cat_noun&not_cmp1&!cmp2&!cmpd&!acron&!nosug'],
'qstem_sup_cmpd_nosug' =>	['l','!sfx&inflable&!cat_vrb&!cat_noun&!cat_pron&cat_num&not_num&sup&cmpd&nosug'],
'qstem_!sup_cmpd_nosug' =>	['l','!sfx&inflable&!cat_vrb&!cat_noun&!cat_pron&cat_num&not_num&!sup&cmpd&nosug'],
'qstem_sup_!cmpd_nosug' =>	['l','!sfx&inflable&!cat_vrb&!cat_noun&!cat_pron&cat_num&not_num&sup&!cmpd&nosug'],
'qstem_!sup_!cmpd_nosug' =>	['l','!sfx&inflable&!cat_vrb&!cat_noun&!cat_pron&cat_num&not_num&!sup&!cmpd&nosug'],
'qstem_sup_cmpd' =>	['l','!sfx&inflable&!cat_vrb&!cat_noun&!cat_pron&cat_num&not_num&sup&cmpd&!nosug'],
'qstem_!sup_cmpd' =>	['l','!sfx&inflable&!cat_vrb&!cat_noun&!cat_pron&cat_num&not_num&!sup&cmpd&!nosug'],
'qstem_sup_!cmpd' =>	['l','!sfx&inflable&!cat_vrb&!cat_noun&!cat_pron&cat_num&not_num&sup&!cmpd&!nosug'],
'qstem_!sup_!cmpd' =>	['l','!sfx&inflable&!cat_vrb&!cat_noun&!cat_pron&cat_num&not_num&!sup&!cmpd&!nosug'],

'acron_cmpd' =>		['l','!sfx&inflable&!cat_vrb&cat_noun&cmpd&acron'],
'acron_!cmpd' =>	['l','!sfx&inflable&!cat_vrb&cat_noun&!cmpd&acron'],
'astem_sup_cmpd' =>	['l','!sfx&inflable&!cat_vrb&!cat_noun&!cat_pron&!cat_num&sup&cmpd'],
'astem_!sup_cmpd' =>	['l','!sfx&inflable&!cat_vrb&!cat_noun&!cat_pron&!cat_num&!sup&cmpd'],
'astem_sup_!cmpd' =>	['l','!sfx&inflable&!cat_vrb&!cat_noun&!cat_pron&!cat_num&sup&!cmpd'],
'astem_!sup_!cmpd' =>	['l','!sfx&inflable&!cat_vrb&!cat_noun&!cat_pron&!cat_num&!sup&!cmpd'],
'nstem2+inf_cmpd' =>	['l','!sfx&!inflable&!pfx&!cat_vrb&cat_noun&cmp2&!dot_fin&cmpd'],
'nstem2+inf_!cmpd' =>	['l','!sfx&!inflable&!pfx&!cat_vrb&cat_noun&cmp2&!dot_fin&!cmpd'],
'vstem_cmpd' =>		['l','!sfx&inflable&cat_vrb&cmpd'],
'vstem_!cmpd' =>	['l','!sfx&inflable&cat_vrb&!cmpd'],
'vstem+inf_cmpd' =>	['l','!sfx&!inflable&!pfx&cat_vrb&cmpd'],
'vstem+inf_!cmpd' =>	['l','!sfx&!inflable&!pfx&cat_vrb&!cmpd'],
'num_1_cmpd' =>		['l','!sfx&inflable&!cat_vrb&!cat_noun&!cat_pron&cat_num&num_1&cmpd'],
'num_1_!cmpd' =>	['l','!sfx&inflable&!cat_vrb&!cat_noun&!cat_pron&cat_num&num_1&!cmpd'],
'num_10_cmpd' =>	['l','!sfx&inflable&!cat_vrb&!cat_noun&!cat_pron&cat_num&num_10&cmpd'],
'num_10_!cmpd' =>	['l','!sfx&inflable&!cat_vrb&!cat_noun&!cat_pron&cat_num&num_10&!cmpd'],
'num_100_cmpd' =>	['l','!sfx&inflable&!cat_vrb&!cat_noun&!cat_pron&cat_num&num_100&cmpd'],
'num_100_!cmpd' =>	['l','!sfx&inflable&!cat_vrb&!cat_noun&!cat_pron&cat_num&num_100&!cmpd'],
'num_1000_cmpd' =>	['l','!sfx&inflable&!cat_vrb&!cat_noun&!cat_pron&cat_num&num_1000&cmpd'],
'num_1000_!cmpd' =>	['l','!sfx&inflable&!cat_vrb&!cat_noun&!cat_pron&cat_num&num_1000&!cmpd'],
'num_1eX_cmpd' =>	['l','!sfx&inflable&!cat_vrb&!cat_noun&!cat_pron&cat_num&num_1eX&cmpd'],
'num_1eX_!cmpd' =>	['l','!sfx&inflable&!cat_vrb&!cat_noun&!cat_pron&cat_num&num_1eX&!cmpd'],
'num+dot_cmpd' =>	['l','!sfx&!inflable&!pfx&!cat_vrb&cat_num&not_num&dot_fin&cmpd'],
'num+dot_!cmpd' =>	['l','!sfx&!inflable&!pfx&!cat_vrb&cat_num&not_num&dot_fin&!cmpd'],
'num_2000_cmpd' =>	['l','!sfx&!inflable&!pfx&!cat_vrb&cat_num&num_2000&cmpd'],
'num_2000_!cmpd' =>	['l','!sfx&!inflable&!pfx&!cat_vrb&cat_num&num_2000&!cmpd'],
#'nstem2_cmpd' =>	['l','!sfx&inflable&!cat_vrb&cat_noun&not_cmp1&cmp2&cmpd'],
#'nstem2_!cmpd' =>	['l','!sfx&inflable&!cat_vrb&cat_noun&not_cmp1&cmp2&!cmpd'],

};

#compound properties defined as a conjunction of atomic ones
#the bit-encoded properties referenced in $Gcmp_prop should be non-x props

$Gcmp_prop={
};

# declaration of the encoding of properties

#field0: 'right/left-side property',
#field1: 'bits or empty for mtx-encoding, * if to be ignored',
#	  prefix dots or num> to show bit position ('...1' = '3>1')
#field2: 'bits must be set if this expr. is true --- for x properties'
#field3: 'entailments: this is added to $Gcmp_prop, use this to define complex properties',
#	  if the property has bit encoded entailments then it is also bit encoded

$Gprops = {

  'mcat_deriv' =>     ['r','','','sfx'], # derivational suffix
  'mcat_stem' =>      ['r','','','!sfx'], # stem
  'mcat_infl' =>      ['r','','','sfx&!inflable'], # inflectional suffix
  'mcat_stem+infl' => ['r','','','!sfx&!inflable&!pfx'], # stem with inflectional suffix
  'mcat_pfx' =>       ['r','','','!sfx&!inflable&pfx'], # prefix
  'mcat_hyphen' =>    ['r','','','sfx&!inflable&punct&!lpunct&!rpunct'], # hyphen and slash
  'mcat_space' =>    ['r','','','sfx&!inflable&punct&!lpunct&!rpunct&space'], # hyphen and slash
  'hyphen' => ['r','','',''],
#  'mcat_stop' =>      ['r','','','sfx&!inflable&punct&final&stop'], # full stop
#  'mcat_punct' =>     ['r','','','sfx&!inflable&punct&final&!stop'], # other punctuation
  'mcat_lpunct' =>    ['r','','','sfx&!inflable&punct&lpunct'], # left side punctuation ([ etc.
  'mcat_lrpunct'=>    ['r','','','sfx&!inflable&punct&lpunct&rpunct'], # punctuation on any side "' etc.
  'mcat_rpunct' =>    ['r','','','sfx&!inflable&punct&rpunct'], # right side punctuation )] etc.
  'mcat_qtag'   =>    ['r','','','sfx&!inflable&!punct&qtag'], # the question tag '-e'

  'dotpunct' => ['r','12>1','',''], # punctuation which contains a period (. or ...)
  'space' => ['r','12>1','',''], # space to be inserted

  'cat_Nom'  => ['r','','','!cat_vrb'], #nominal
  'cat_N'    => ['r','','','!cat_vrb&cat_noun&cat_Nom'], #noun
  'cat_Npron' =>['r','','','!cat_vrb&!cat_noun&cat_pron&cat_Nom'], # NP pronoun

  'cat_Adj'  => ['r','','','!cat_vrb&!cat_noun&!cat_num&!cat_pron&cat_Nom'], # adjective
  'cat_Part' => ['r','','','!cat_vrb&!cat_noun&!cat_num&!cat_pron&cat_Nom'], #participle
  'cat_Num'  => ['r','','','!cat_vrb&!cat_noun&cat_num&!cat_pron&cat_Nom'], #numeral
  'cat_V'    => ['r','','','cat_vrb'], #verb
  'cat_Adv'  => ['r','16>1','','!inflable'], #adverb
#  'npfx'     => ['r','4>00','','!sfx&!inflable&pfx'], # verbal prefix
  'pfx_V'     => ['r','9>001','','!sfx&!inflable&pfx'], # verbal prefix
  'pfx_sup'   => ['r','9>010','','!sfx&!inflable&pfx'], # the superlative prefix
  'pfx_Adj'   => ['r','9>011','','!sfx&!inflable&pfx'], # prefix of adjectives
  'pfx_VNom'  => ['r','9>100','','!sfx&!inflable&pfx'], # prefix used in nominalized forms (ön+V+Ás/Ó)
  'pfx_N'     => ['r','9>000','','!sfx&!inflable&pfx'], # nominal prefix

  'atomic'   => ['r','30>1',''],
#  'atomic'   => ['r','*',''],
  'BAD'      => ['r','31>1',''],

#the following are not referenced in the lexicon -- only complex properties refer to them
  'inflable' => ['r','1',''], # an inflection may be attached
  'sfx'      => ['r','..1',''], # is a suffix (may not appear as the 1st morpheme of a word)
  'cat_vrb'  => ['r','.1',''], # is a verb
  'pfx'      => ['r','8>1','','!cat_vrb'], # is a prefix
  'punct'    => ['r','','','pfx'], # is punctuation (marked at the same position as pfx)
  'lpunct'   => ['r','9>1','',''], # is a left punctuation
  'rpunct'   => ['r','10>1','',''], # is a right punctuation
  'qtag'     => ['r','11>1','',''], # is the question tag '-e'
#  'stop'     => ['r','13>1','',''], # is a full stop

#  'num_1fdig'=> ['r','20>111',''],#a digit which may not be followed by another

#  'numX'  => ['r','20>1',''],#1-9
#  'n3'    => ['r','21>000','','numX'],#1-9
#  'n1d'   => ['r','21>001','','numX'],#kett(ed),egy(ed)
#  'n10n'  => ['r','21>010','','numX'],#tizen, huszon
#  'n30'   => ['r','21>011','','numX'],#30-90
#  'n10'   => ['r','21>100','','numX'],#10,20
#  'n100'  => ['r','21>101','','numX'],#100
#  'n1000' => ['r','21>110','','numX'],#1000
#  'n1eX'  => ['r','21>111','','numX'],#1e6,9,12

#  'vpfx0'    => ['r','4>1','',''], # verbal prefix
#  'suppfx0'  => ['r','5>1','',''], # the superlative prefix

# properties used in the lexicon
##particular properties
  'cmpd' => ['r','24>1','',''], #it is a compound
  'acron' =>    ['r','20>1','',''],#is an acronym
  'nosug' =>    ['r','28>1','',''],#do not suggest

##vowel harmony
  'VHB'  => ['r','3>0',''], #back vowel harmony (ház+ban)
  'VHF'  => ['r','3>1',''], #front vowel harmony (kéz+ben)
  'VHFR' => ['r','4>1','','VHF'], #front rounded vowel harmony (föld+ön)
  'VHFU' => ['r','4>0','','VHF'], #front unrounded vowel harmony (kéz+en)

##properties of nominal stems

#  'Cfin' => ['r','6>1','inflable'], #the morph is consonant-final
  'Cfin' => ['r','5>1',''], #the morph is consonant-final
  'Vfin' => ['r','','','!Cfin'], #the morph is vowel-final

  'LOW'  => ['r','6>x','inflable&!cat_vrb'], #the stem triggers suffix-initial vowel lowering (ház+at)

  'cat_noun' => ['r','7>1','inflable&!cat_vrb'], # is a noun
  'cat_pron' => ['r','17>1','inflable&!cat_vrb&!cat_noun'], # is an (NP) pronoun
  'cat_num' => ['r','19>1','inflable&!cat_vrb&!cat_noun&!cat_pron'], # is a numeral

#numerals
  'romanX'   =>   ['r','18>1','',''], # is a roman numeral
  'roman_1'    => ['r','20>001','','romanX'],#the numerals 1-99
  'roman_10'   => ['r','20>011','','romanX'],#the numerals 1-99
  'roman_100'  => ['r','20>101','','romanX'],#the numerals 100,200,...,900
  'roman_1000' => ['r','20>111','','romanX'],#the numeral 1000 (if no hundreds or tens or ones)

#  'num'      => ['r','24>1','',''],#is a numeral quantifier
  'not_num'  => ['r','20>000','','!romanX'],#non-numeral quantifiers
  'num_1'    => ['r','20>001','','!romanX'],#the numerals 1,2
  'num_10'   => ['r','20>011','','!romanX'],#the numerals 3-99
  'num_100'  => ['r','20>101','','!romanX'],#the numerals 100,200,...,900
  'num_1000' => ['r','20>111','','!romanX'],#the numeral 1000 (if no hundreds or tens or ones)
  'num_1eX'  => ['r','20>010','','!romanX'],#the numerals 1e6,9,12
  'num_1dig' => ['r','21>0','','!romanX&num_dig'],#a single digit 1-9
  'num_fdig' => ['r','21>1','','!romanX&num_dig'],#a digit which may not be first but must be final
  'num_dig' =>  ['r','20>1.0','','!romanX'],#a digit which may be final
  'num_2000' => ['r','20>001','','cat_num'], #the numeral 1000 (numerals above 2000 must contain a hyphen if there are hundreds or tens or ones)
  'num_0dig' => ['r','20>011','','cat_num'], #a single 0 digit
  'num_dotcom'=>['r','20>010','','cat_num'], #dot or comma

  'deix' => ['r','19>1','inflable&!cat_vrb&!cat_noun&cat_pron'], #is a deictic pronoun (ez/az)
  'cmp2' => ['r','18>1','!cat_vrb'], # may be a right compound member
  'not_cmp1' => ['r','19>1','!cat_vrb'], # may not be a left compound member
#  'stmalt' => ['r','*','!cat_vrb'], # is a closed-class stem alternation allomorph

  'DIG' => ['r','',''], #the morph is digraph-final (mész, agy)
  'GEM' => ['r','',''], #the morph is geminate-final (sakk, Bonn)

  'i_fin' => ['r','14>x','inflable&!cat_vrb&Vfin'], #the morph is othographically i-final (Helsinki > helsinki)
  'ifin'  => ['r','15>x','inflable&!cat_vrb&Vfin'], #the morph is phonetically i-final (Ady > ?adyi)

  'b_fin' => ['r','12>00001',''], #the morph is b-final (and is a geminate) jobb+ól
  'k_fin' => ['r','12>00010',''], #sakk+ént
  'n_fin' => ['r','12>00011',''], #Mariann+ak
  'r_fin' => ['r','12>00100',''], #orr+ól
  't_fin' => ['r','12>00101',''], #matt+ól

  'dot_fin'  => ['r','13>1',''], #the stem is a .-final abbreviation

  '-vAl' => ['r','',''], #the stem takes the instrumental suffix
  '=Al'  => ['r','12>00','','-vAl'], #the stem takes the instrumental suffix in this form (geminate or digraph-final)
  '=vAl' => ['r','12>01','','-vAl'], #vowel or v-final
  '=bAl' => ['r','12>10000','','-vAl'],
  '=cAl' => ['r','12>10001','','-vAl'],
  '=dAl' => ['r','12>10010','','-vAl'],
  '=fAl' => ['r','12>10011','','-vAl'],
  '=gAl' => ['r','12>10100','','-vAl'],
  '=hAl' => ['r','12>10101','','-vAl'],
  '=jAl' => ['r','12>10110','','-vAl&==jAl'],
  '=kAl' => ['r','12>10111','','-vAl'],
  '=lAl' => ['r','12>11000','','-vAl'],
  '=mAl' => ['r','12>11001','','-vAl'],
  '=nAl' => ['r','12>11010','','-vAl'],
  '=pAl' => ['r','12>11011','','-vAl'],
  '=rAl' => ['r','12>11100','','-vAl'],
  '=sAl' => ['r','12>11101','','-vAl'],
  '=tAl' => ['r','12>11110','','-vAl'],
  '=zAl' => ['r','12>11111','','-vAl'],
  '==jAl' =>['r','','',''],

  '=Vt' => ['r','8>1',''], #the accusative suffix has a linking vowel
  '=_t' => ['r','','','!=Vt'], #the accusative suffix has no linking vowel

  '-Vs' => ['r','',''], #the stem takes the -s derivational suffix
  '=Vs' => ['r','9>1',''], #the -s suffix has a linking vowel
  '=_s' => ['r','','','!=Vs'], #the -s suffix has no linking vowel

  'priv' => ['r','',''], #the stem takes the nominal privative suffix
  '=AtlAn' => ['r','',''], #the stem takes the nominal privative suffix in this form (mostly C-final lowering stems)

  '-jA' => ['r','',''], #the stem takes the 3rd person possessive suffix
  '=jA' => ['r','10>1','','-jA'], #the form of the 3rd person possessive suffix
  '=A' =>  ['r','','','-jA&!=jA'],
  '-jAi' => ['r','',''], #the stem takes the plural possesion suffixes
  '=Ai' =>['r','11>0','','-jAi&Cfin'], #the form of the plural possession suffixes
  '=jAi' => ['r','','','-jAi&!=Ai'], #possible combinations:
  '=i' =>  ['r','','','-jAi&!Cfin&!ifin&!=jAi'], #jA i, jA jAi, A Ai, jA Ai, jA jAi A Ai (this could also be encoded as A jAi, see next line, but we do not do that)
#  '=x[j]A[i]'=>  ['r','','','-jA&!=jA&-jAi&!=Ai'], #words having jA jAi A Ai are explicitly marked by this feature

  'ESS_Ul' => ['r','',''], #takes the adverb forming essive suffix -Ul
  'ESS_Vn' => ['r','',''], #takes the adverb forming essive suffix -Vn
  'ESS_0' => ['r','','',''], #takes the zero adverb forming essive suffix (talan)

  '=kOd' => ['r','',''], #takes the -skOdik suffix in this form
  '=VskOd' => ['r','',''], #takes the -skOdik suffix in this form

  '-AVUl' => ['r','',''], #takes the verb forming suffix -Ul (laz+ul)
  '-Vdik' => ['r','',''], #takes the verb forming suffix -Vdik (piros+odik)
  '-VsOdik' => ['r','',''],#takes the verb forming suffix -sOdik (német+esedik)

  '-ít' => ['r','',''],   #takes the verb forming suffix -ít (laz+ít)
  '-Vsít' => ['r','',''], #takes the verb forming suffix -Vsít (német+esít)

  '-i' => ['r','',''], #takes the adjective forming -i suffix (pest+i)
  '-NVl' => ['r','',''], #takes the verb forming -l suffix (lapát+ol)

  '-Vsdi' => ['r','',''],#takes the -Vsdi suffix
  '-kA' => ['r','',''],  #takes the diminutive -kA suffix
  '-sÁg' => ['r','',''], #takes the -sÁg  suffix

  '-VntA' => ['r','',''],#takes the -VntA suffix
  '-kor' => ['r','',''], #takes the -kor suffix

  'grad' => ['r','',''], #the stem is gradable (-bb may be attached)
  'male' => ['r','',''], #is male (-né may be attached)
  'place' => ['r','*',''],#is a place (-szerte may be attached)
  'unit' => ['r','*',''], #is a unit (-VntA, -szám(ra) and -nyi require this)

  '-Vd' => ['r','',''],  #takes the fractional -Vd suffix
  '-nyi' => ['r','',''], #takes the -nyi suffix
  '-nyi-i' => ['r','','',''],#takes the -nyi suffix as -i (ny final words)
  '=eru' => ['r','','',''],#takes the -szerű suffix as -erű (sz final words)
  '=-fele' => ['r','','',''],#takes f‚le and szerű in a - initial form (proper nouns)

  'loc_Ott' => ['r','','',''],#takes the locative -Ott suffix
  'loc_at' => ['r','','',''], #the noun's locative is nÁl[ADE]
  'loc_in' => ['r','','',''], #the noun's locative is bAn[INE]
  'loc_on' => ['r','','',''], #the noun's locative is On[SUP]

#  'deix' => ['r','',''], #is a deictic pronoun (ez/az)

#left properties
  'LOWini' => ['l','','',''], #lowered initial suffix -Ak or -An
  'infsfx' => ['l','','',''], #inflectional suffix

  'pp' => ['l','',''], #is a postposition (may merge with a deictic pronoun)
  'num' => ['l','',''],#is a numeral
  'digit' => ['l','',''],#is a digit
  'dollar' => ['l','','',''],#is a symbol that can be attached to a string of digits
  'roman' => ['l','',''],#is a roman number
  'sufx' => ['l','','',''],#is a suffix

#properties of nominal suffixes
  'FVL' => ['l','',''], #the suffix triggers stem-final vowel lengthening (kacsa, kacsá+t)
  'SVS' => ['l','',''], #the suffix triggers stem vowel shortening (nyár, nyar+ak)
  'VZA' => ['l','',''], #the suffix triggers stem-internal vowel-zero alternation (bokor, bokr+ok)
  'vST' => ['l','',''], #the suffix triggers stem-final v-insertion ()
  'UDEL' => ['l','',''], #the suffix triggers stem-final ú-deletion (varjú, varj+ak)
  'FVD' => ['l','',''], #the suffix triggers stem-final vowel deletion (barna, barn+ít)
  'PVS' => ['l','',''], #the suffix triggers stem-final ó/a, ő/e alternation (ajtó, ajta(ja))

  '0' => ['l','',''], #is a zero suffix
  'ANP' => ['l','',''], #is the anaphoric possessive suffix (-é)
  'FAM' => ['l','',''], #the familiar plural suffix (-ék)
  'PL' => ['l','',''], #is a plural suffix (-k, -ék, -..i)
  'POSS' => ['l','',''], #is a possessive suffix (-m, -d, -ja, -nk, -tok, -juk ...)
  '3P' => ['l','',''], #is a 3rd person possessive suffix (-ja, -juk)
  'INS' => ['l','',''], #is an allomorph of the instrumental (-vAl) or translative (-vÁ) suffix
  'ACC' => ['l','',''], #is an allomorph of the accusative (-Vt) suffix
  'SUP' => ['l','',''], #is an allomorph of the superessive (-On) suffix
  'CAU' => ['l','',''], #is the causal-final suffix -ért
  '-jÚ' => ['l','',''], #is the -jÚ suffix
  'TER' => ['l','',''], #is the -ig suffix
  'CASE' => ['l','',''],#is a case suffix
  'IN' => ['l','',''],  #is one of the INE/ILL/ELA suffixes (in/into/from inside)
  'ON' => ['l','',''],  #is one of the SUP/SUB/DEL suffixes (on/onto/from the top of)
  'Vd' => ['l','',''],  #is a fractional/ordinal etc. suffix (-Vd...)
  'Vn' => ['l','',''],  #is essive numeral suffix (-Vn)
  'szOr' => ['l','',''],#the multipicative suffix -szOr and its company
  'Vs' => ['l','','',''],#the adjective or noun forming suffix (-Vs)
  'szeru' => ['l','','',''],#the szerű and szerte suffixes

#properties of verb stems
  'reg' => ['r','',''], #is a regular verb stem
  'irreg' => ['r','*',''], #ignore this

  '-Ok' => ['r','',''], #the stem takes the 1sg indic suffix -Ok
  '-Om' => ['r','',''], #the stem takes the 1sg indic suffix -Om

  '-Asz'=> ['r','',''],#the stem takes the 2sg indic suffix -Asz/Ol
  '=sz' => ['r','5>00','','-Asz'], #the form of the 2sg indic suffix is -sz
  '=Asz'=> ['r','5>01','','-Asz'],#the form of the 2sg indic suffix is -Asz
  '=Ol' => ['r','5>10','','-Asz'], #the form of the 2sg indic suffix is -Ol
  '=02' => ['r','5>11','','-Asz'], #the form of the 2sg indic suffix is 0

  '-03' => ['r','',''], #the stem takes the 0 3sg indic suffix
  '-ik' => ['r','',''], #the stem takes the 3sg indic suffix -ik

  '-Unk' => ['r','',''],#the stem takes the 1pl indic suffix -Unk

  '-tOk' => ['r','',''], #the stem takes the 2pl indic suffix -tOk
  '=tOk' => ['r','7>x','cat_V','-tOk'], #the form of the 2pl indic suffix is -tOk
  '=OtOk' => ['r','','','-tOk&!=tOk'],#the form of the 2pl indic suffix is -OtOk

  '=nXX' => ['r','8>x','cat_V'], #the form of the 3pl_ind/cond/inf suffixes is -nAk/-nA/ni
  '=AnXX' => ['r','','','!=nXX'],#the form of the 3pl_ind/cond/inf suffixes is -AnAk/-AnA/Ani

  '-nAk' => ['r','',''], #the stem takes the 3pl indic suffix -nAk and the -nA, -ni suffixes
  '=nAk' => ['r','','','-nAk&=nXX'], #the form of the 3pl indic suffix is -nAk
  '=AnAk' => ['r','','','-nAk&!=nXX&=AnXX'],#the form of the 3pl indic suffix is -AnAk

  '-nA' => ['r','',''], #the stem takes the conditional (-nA) and infinitive (-ni) suffixes
  '=nA' => ['r','','','-nA&=nXX'], #the form of the conditional suffixes is -nA
  '=AnA' => ['r','','','-nA&!=nXX&=AnXX'],#the form of the 3pl indic suffix is -AnA

  '-ni' => ['r','',''], #the stem takes the infinitive (-ni) suffixes
  '=ni' => ['r','','','-ni&=nXX'], #the form of the infinitive suffixes is -ni

  '-lAk' => ['r','',''], #the stem takes the S:1sg,O:2 suffix -lAk/AlAk (not true if the -Ak form is taken!)
  '=lAk' => ['r','9>x','cat_V','-lAk'], #the form of the S:1sg,O:2 suffix is -lAk
  '=AlAk' => ['r','','','-lAk&!=lAk'],#the form of the S:1sg,O:2 suffix is -AlAk
  '=Ak' => ['r','',''],  #the form of the S:1sg,O:2 suffix is -Ak (ll final stem)

  '-d' => ['r','',''], #the stem takes the S:2sg, definite object imperative suffix -d
  '=d' => ['r','','','-d'], #the form of the S:1sg,O:Def suffix is -d
  '=0d'=> ['r','','','-d'],#the form of the S:1sg,O:Def suffix is 0 (dd final stem, fedd+0)
  '=dd'=> ['r','','','-d'],#the form of the S:1sg,O:Def suffix is -dd (ve+dd)
  '=sd'=> ['r','','','-d'],#the form of the S:1sg,O:Def suffix is -dd (hajt+sd)

  '-j' => ['r','',''], #the stem takes the imperative suffixes -j...
  '=j' => ['r','10>00','','-j'], #the form of the imperative suffixes is -j...
  '=s' => ['r','10>10','','-j'], #the form of the imperative suffixes is -s... (vés+s, hajt+s, üs+s, fes+s)
  '=z' => ['r','10>11','','-j'], #the form of the imperative suffixes is -z... (néz+z, máss+z)
  '=gy'=> ['r','10>01','','-j'],#the form of the imperative suffixes is -gy... (ve+gyen, i+gyon)
  '-jék' => ['r','','',''],  #the stem takes the imperative suffix -jék
  '-jAm' => ['r','','',''],  #the stem takes the INDEFINITE imperative suffix -jAm
  '-nék' => ['r','','',''],  #the stem takes the 3SG conditional suffix -nék

  '-jUk' => ['r','',''], #the stem takes the Def obj indicative suffixes
  '=jUk' => ['r','12>0','','-jUk'], #the form of the Def obj indic suffixes is -jUk
  '=sUk' => ['r','10>101','','-jUk'], #the form of the Def obj indic suffixes is -sUk (vés+sük)
  '=zUk' => ['r','10>111','','-jUk'], #the form of the Def obj indic suffixes is -zUk (néz+zük, máss+zuk, iss+zuk)

  '-tt' => ['r','',''],   #the stem takes the 3sg past suffix -tt
#  '=t' => ['r','13>x','cat_V','-tt&!=tt'],    #the form of the 3sg past suffix is -t
  '=t' => ['r','','cat_V','-tt&!=tt'],    #the form of the 3sg past suffix is -t
  '=t2' => ['r','','cat_V','-tt'],    #the form of the past participle suffix is -t
  '=tt' => ['r','','','-tt'],   #the form of the 3sg passive suffix is -tt (V-final stem)
#  '=Ott' => ['r','','','-tt&!=t&!=tt'],  #the form of the 3sg past suffix is -Ott
  '=Ott' => ['r','','','-tt&!=tt'],  #the form of the 3sg past suffix is -Ott
  '=Ott2' => ['r','','','-tt'],  #the form of the passive participle suffix is -Ott
#  '=t\'' => ['r','',''],  #the form of the passive participle suffix is -t
#  '=Ott\'' => ['r','',''],#the form of the passive participle suffix is -Ott

  '-tAm' => ['r','',''],  #the stem takes the non-3sg past suffixes -tAm
  '=tAm' => ['r','14>x','cat_V','-tAm&!=tt'],  #the form of the non-3sg past suffixes is -tAm
  '=ttAm' => ['r','','','-tAm&=tt'], #the form of the non-3sg past suffixes is -ttAm (V-final stem)
  '=OttAm' => ['r','','','-tAm&!=tAm&!=tt'],#the form of the non-3sg past suffixes is -OttAm

  '-hAt' => ['r','',''], #the stem takes the permissive/modal suffix -hAt
  '-Ás' => ['r','',''],  #the stem takes the nominalizer suffix -Ás
  '-vA' => ['r','',''],  #the stem takes the adverbial participle suffix -vA and -vÁn
  '-vÁn' => ['r','',''],  #the stem takes the adverbial participle suffix -vÁn
  '-Ó' => ['r','',''],   #the stem takes the active participle suffix -Ó
  '-AndÓ' => ['r','',''],#the stem takes the future passive participle suffix -AndÓ
  '-AtlAn' => ['r','',''],#the stem takes the verbal privative suffix -AtlAn
  '-tAbAn' => ['r','','',''],#the stem takes the deverbal suffixes -tA, -tÁbAn etc.

  '-tAt' => ['r','',''], #the stem takes the factitive suffix -tAt
  '=tAt' =>  ['r','15>x','cat_V','-tAt'],  #the form of the factitive suffix is -At
  '=At' => ['r','','','-tAt&!=tAt'], #the form of the factitive suffix is -tAt

  '-gAt' => ['r','',''], #the stem takes the "frequentative" suffix -gAt
  '=gAt' => ['r','16>x','cat_V','-gAt'], #the form of the "frequentative" suffix is -gAt
  '=OgAt' =>['r','','','-gAt&!=gAt'],#the form of the "frequentative" suffix is -OgAt

#left properties of morphs
  'hyph' => ['l','',''], #is a hyphen
  'comp2' => ['l','',''], #the morph can be the right-side member of a compound
  '0mrf' => ['l','',''], #is a zero morph

  'dot_punct'  => ['l','',''], #the suffix is a .-initial punctuation

  'Cini' => ['l','',''], #the morph is consonant-initial
  'Vini' => ['l','',''], #the morph is vowel-initial

  'b_ini' => ['l','',''], #the morph is b-initial
  'c_ini' => ['l','',''],
  'cs_ini' => ['l','',''],
  'd_ini' => ['l','',''],
  'dz_ini' => ['l','',''],
  'dzs_ini' => ['l','',''],
  'f_ini' => ['l','',''],
  'g_ini' => ['l','',''],
  'gy_ini' => ['l','',''],
  'h_ini' => ['l','',''],
  'j_ini' => ['l','',''],
  'k_ini' => ['l','',''],
  'l_ini' => ['l','',''],
  'ly_ini' => ['l','',''],
  'm_ini' => ['l','',''],
  'n_ini' => ['l','',''],
  'ny_ini' => ['l','',''],
  'p_ini' => ['l','',''],
  'r_ini' => ['l','',''],
  's_ini' => ['l','',''],
  'sz_ini' => ['l','',''],
  't_ini' => ['l','',''],
  'ty_ini' => ['l','',''],
  'v_ini' => ['l','',''],
  'z_ini' => ['l','',''],
  'zs_ini' => ['l','',''],

  'INF' => ['l','','',''],#is the infinitive ending
  'sg3' => ['l','','',''],#is the present indicative 3 sg ending 0/-ik
  'sg1' => ['l','','',''],#is the present indicative 1 sg ending -Om, -jAm
  '119' => ['l','','',''],#the suffixes -i -VntA and -Anként

  'badorth' => ['r','','',''],#orthographically substandard

#global properties
  'sup' =>	['r','23>1',''], #licenses the superlative prefix
  '-ék' => 	['r','*',''], #licenses the familiar suffix -ék
  'AS' => 	['r','21>1',''], #is the nominalization suffix -Ás
  'O' => 	['r','22>1',''], #is the present participle suffix -Ó
  '119sfx' => 	['r','20>1',''], # the suffixes -i -Ú -Vs -nyi -nként: e.g. két+láb+ú
  'HAT' => 	['r','20>1',''], #is the verbal suffix -hAt
  'sfx_FRACT' => ['r','24>1','',''],#is the fractional suffix -Vd

  '_gp_119sfx' => ['r','','','119sfx'],
  '_gp_AS' => ['r','','','AS'],
  '_gp_O' => ['r','','','O'],
  '_gp_-ék' => ['r','','','-ék'],
  '_gp_sup' => ['r','','','sup'],
  '_gp_HAT%cat_V' => ['r','','','HAT'],

  '_glr_<pp#trans2>' => ['r','*','',''],
  '_glr_trans1' => ['r','*','',''],
  '_glr_trans2' => ['r','*','',''],
  '_glr_trans2_gp_cat_V%trans0' => ['r','*','',''],
  '_glr_trans2_gp_cat_V%trans1' => ['r','*','',''],
  '_gp_cat_V' => ['r','*','',''],
  '_gp_cat_V%trans1' => ['r','*','',''],
  '_gp_cat_V%trans2' => ['r','*','',''],

#generator only, due to generated derivational suffix sequences - ignore them all
  '_glr_<pp#trans2>_gp_sup' => ['r','*','',''],
  '_glr_<pp#trans2>_gp_trans1' => ['r','*','',''],
  '_glr_<pp#trans2>_gp_trans2' => ['r','*','',''],
  '_glr_trans2_gp_AS%trans1' => ['r','*','',''],
  '_glr_trans2_gp_sup' => ['r','*','',''],
  '_glr_trans2_gp_trans1' => ['r','*','',''],
  '_glr_trans2_gp_trans2' => ['r','*','',''],
  '_gp_AS%HAT' => ['r','*','',''],
  '_gp_AS%cat_V%trans1' => ['r','*','',''],
  '_gp_AS%cat_V%trans2' => ['r','*','',''],
  '_gp_AS%sup' => ['r','*','',''],
  '_gp_AS%trans1' => ['r','*','',''],
  '_gp_AS%trans2' => ['r','*','',''],
  '_gp_HAT' => ['r','*','',''],
  '_gp_HAT%cat_V%trans1' => ['r','*','',''],
  '_gp_HAT%cat_V%trans1%trans2' => ['r','*','',''],
  '_gp_HAT%cat_V%trans2' => ['r','*','',''],
  '_gp_trans1' => ['r','*','',''],
  '_gp_trans2' => ['r','*','',''],
  '_gp_AS%HAT%trans2' => ['r','*','',''],
  '_glr_trans2_gp_trans1%trans2' => ['r','*','',''],
  '_gp_AS%HAT%trans1' => ['r','*','',''],
  '_gp_AS%HAT%trans1%trans2' => ['r','*','',''],
  '_gp_AS%trans1%trans2' => ['r','*','',''],
  '_gp_trans1%trans2' => ['r','*','',''],
  '_gp_cat_V%trans0_glr_trans2' => ['r','*','',''],
  '_gp_cat_V%trans1_glr_trans2' => ['r','*','',''],

#properties used for '6-3' rule checking
  'A=0' => ['r','*','',''],
  'A=1' => ['r','*','',''],
  'A=2' => ['r','*','',''],
  'A=3' => ['r','*','',''],
  'A=I' => ['r','*','',''],
  'A=J' => ['r','*','',''],
  'A=B' => ['r','*','',''],
  'A=C' => ['r','*','',''],
  'B=0' => ['r','*','',''],
  'B=1' => ['r','*','',''],
  'B=2' => ['r','*','',''],
  'B=3' => ['r','*','',''],
  'B=4' => ['r','*','',''],
  'B=5' => ['r','*','',''],
  'B=6' => ['r','*','',''],
  'B=7' => ['r','*','',''],
  'B=A' => ['r','*','',''],
  'B=B' => ['r','*','',''],
  'B=C' => ['r','*','',''],
  'B=D' => ['r','*','',''],
  'B=E' => ['r','*','',''],
  'B=F' => ['r','*','',''],
  'B=G' => ['r','*','',''],
  'B=H' => ['r','*','',''],

#OLD STUFF

#  '_gp_~-ék%AS' =>			['r','','','!-ék&!sup&AS&!O'],
#  '_gp_~-ék%O' =>			['r','','','!-ék&!sup&!AS&O'],
#  '_gp_~-ék' => 			['r','','','!-ék&!sup&!AS&!O'],
#  '_gp_-ék' =>	 			['r','','','-ék&!sup&!AS&!O'],
#  '_gp_~-ék%sup' => 			['r','','','!-ék&sup&!AS&!O'],
#  '_gp_sup' => 				['r','','','sup'],
#
#  '_gp_~-ék%HAT%cat_V' =>		['r','','','HAT'],
#
#  '_glr_<pp#trans2>_gp_~-ék' => 	['r','*',''],
#  '_glr_-ék' => 			['r','*',''],
#  '_glr_trans1' => 			['r','*',''],
#  '_glr_trans2_gp_~-ék' => 		['r','*',''],
#  '_glr_trans2_gp_~-ék%cat_V%trans0' => ['r','*',''],
#  '_glr_trans2_gp_~-ék%cat_V%trans1' => ['r','*',''],
#  '_gp_cat_V' => 			['r','*',''],
#  '_gp_~-ék%cat_V' => 			['r','*',''],
#  '_gp_~-ék%cat_V%trans2' => 		['r','*',''],
#  '_gp_~-ék%cat_V%trans3' => 		['r','*',''],
#  '_gp_~-ék%cat_V%trans1' => 		['r','*',''],
};

1;
